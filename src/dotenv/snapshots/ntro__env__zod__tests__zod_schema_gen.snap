---
source: src/env/zod.rs
expression: output
---

import z from "zod";

const clientEnvSchemas = {

}

const serverEnvSchemas = {
    NAME: z.string(),
    NAME2: z.enum(['a','b']),
    KEY: z.string(),
    keys: z.string(),
    keys2: z.coerce.string(),
    NAME5: z.string(),
    KEY_Value: z.coerce.number(),
    keys2Da: z.enum(['city','townhall']),
}


export const clientEnv: z.infer<z.ZodObject<typeof clientEnvSchemas>> =
  new Proxy({} as any, {
    get(_, prop: string) {
      try {
        if (prop in clientEnvSchemas) {
          return clientEnvSchemas[prop as keyof typeof clientEnvSchemas].parse(
            processEnv[prop as keyof typeof processEnv],
            { path: [prop] }
          );
        }
        throw new Error(
          `${prop} is not defined for client side environment variables.`
        );
      } catch (e) {
        throw new BadEnvError(`failed to read ${prop} from proccess.env`, e);
      }
    },
  });

export const serverEnv: z.infer<z.ZodObject<typeof serverEnvSchemas>> =
  new Proxy({} as any, {
    get(_, prop: string) {
      try {
        if (prop in serverEnvSchemas) {
          return serverEnvSchemas[prop as keyof typeof serverEnvSchemas].parse(
            processEnv[prop as keyof typeof processEnv],
            { path: [prop] }
          );
        }
        throw new Error(
          `${prop} is not defined for server side environment variables.`
        );
      } catch (e) {
        throw new BadEnvError(`failed to read ${prop} from proccess.env`, e);
      }
    },
  });


const processEnv = {
   NAME: process.env.NAME,
   NAME2: process.env.NAME2,
   KEY: process.env.KEY,
   keys: process.env.keys,
   keys2: process.env.keys2,
   NAME5: process.env.NAME5,
   KEY_Value: process.env.KEY_Value,
   keys2Da: process.env.keys2Da,
}

class BadEnvError extends Error {
    constructor(public message: string, public cause: unknown){
        super(message)
        if (cause instanceof Error) {
          this.message = [message, cause].join("\n â†³ ");
        }
    }
}
               
